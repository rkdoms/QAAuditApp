USE [Quality]
GO
/****** Object:  StoredProcedure [dbo].[QA_Audit_ins_archive_main]    Script Date: 2/14/2020 12:29:27 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		Ricardo Maureira
-- Create date: 02/04/2020
-- Description:	insert a new row for historical audit.
-- =============================================
CREATE PROCEDURE [dbo].[QA_Audit_ins_archive_main]	
	@Sourceinfoid int,
	@CreatedBy varchar(100)
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;
	declare @currentDate datetime = GETDATE()
	declare @SourceName varchar(500) = (select source from [dbo].[QA_Audit_main] where Sourceinfoid = @Sourceinfoid)
    -- Insert statements for procedure here
	insert into QA_Audit_archive_main (Sourceinfoid, IsActive, StartTime, EndTime, CreatedBy, PassFail, Source, QATeamNotes)
	values
	(@Sourceinfoid, 1, @currentDate, DATEADD(DAY,1,@currentDate), @CreatedBy, 0, @SourceName, null)

	--clean test_data and questions
	update dbo.QA_Audit_test_data set PassFail=0, Answered=0 where SourceInfoId = @Sourceinfoid

	update dbo.QA_Audit_question set PassFail=0, Notes = null, VerifiedBy = null, VerifiedOn = null
	where id_test_data in(
		select id from dbo.QA_Audit_test_data where SourceInfoId = @Sourceinfoid 
		)
END
GO
/****** Object:  StoredProcedure [dbo].[QA_Audit_sel_archive_main]    Script Date: 2/14/2020 12:29:27 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		Ricardo Maureira
-- Create date: 02/04/2020
-- Description:	list all Audit Achive main records by id, isActive.
-- =============================================
CREATE PROCEDURE [dbo].[QA_Audit_sel_archive_main]	
	@Sourceinfoid int,
	@id int = 0,
	@isActive int = -1
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

    -- Insert statements for procedure here
	SELECT * FROM dbo.QA_Audit_archive_main 
	WHERE Sourceinfoid = 
		CASE 
			WHEN @Sourceinfoid = 0 THEN Sourceinfoid 
			ELSE @Sourceinfoid 
		END
	AND isActive =
		CASE 
			WHEN @isActive = -1 THEN isActive 
			ELSE @isActive 
		END
	and id = 
		CASE 
			WHEN @id = 0 THEN id 
			ELSE @id 
		END
	ORDER BY isActive desc, StartTime desc
END
GO
/****** Object:  StoredProcedure [dbo].[QA_Audit_sel_archive_main_distinct]    Script Date: 2/14/2020 12:29:27 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		Ricardo Maureira
-- Create date: 02/13/2020
-- Description:	list all distinct Audit Achive main records 
-- =============================================
CREATE PROCEDURE [dbo].[QA_Audit_sel_archive_main_distinct]	
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

    -- Insert statements for procedure here
	SELECT distinct Sourceinfoid,  source FROM dbo.QA_Audit_archive_main 
	where IsActive = 0
	ORDER BY source
END
GO
/****** Object:  StoredProcedure [dbo].[QA_Audit_sel_archive_question]    Script Date: 2/14/2020 12:29:27 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

-- =============================================
-- Author:		Ricardo Maureira
-- Create date: 02-12-2020
-- Description:	get all question history info by id of test data table
-- =============================================
CREATE PROCEDURE [dbo].[QA_Audit_sel_archive_question]
	-- Add the parameters for the stored procedure here
	@idmain int,
	@idtestdata int,
	@questionNumber int = 0
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

	SELECT * from [dbo].[QA_Audit_archive_question]	
	where id_archive_main = @idmain 
	and id_archive_test_data = @idtestdata
	and questionNumber = 
		case when @questionNumber = 0 then questionNumber
		else @questionNumber end
END
GO
/****** Object:  StoredProcedure [dbo].[QA_Audit_sel_archive_test_data]    Script Date: 2/14/2020 12:29:27 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

-- =============================================
-- Author:		Ricardo Maureira
-- Create date: 02-12-2020
-- Description:	get all testdata History info by sourceinfoid and id 
-- =============================================
CREATE PROCEDURE [dbo].[QA_Audit_sel_archive_test_data]
	-- Add the parameters for the stored procedure here
	@sourceinfoid int,
	@id int 
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

	SELECT t1.* from [dbo].[QA_Audit_archive_test_data] t1
	where t1.sourceinfoid = @sourceinfoid
	and t1.id_archive_main =  @id
END
GO
/****** Object:  StoredProcedure [dbo].[QA_Audit_sel_main]    Script Date: 2/14/2020 12:29:27 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

-- =============================================
-- Author:		Ricardo Maureira
-- Create date: 01/28/2020
-- Description:	list all Audit main records by Source,  Last Audited date.
-- =============================================
CREATE PROCEDURE [dbo].[QA_Audit_sel_main]
	@Sourceinfoid int = 0,
	@Last_Audited datetime = null
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

    -- Insert statements for procedure here
	select t1.*, s1.total, s1.passed,
	s1.total - s1.passed failed, t2.[Name]
	from dbo.QA_Audit_main t1
	JOIN (
		SELECT t1.Sourceinfoid, 
		(select COUNT(sq1.id) from dbo.QA_Audit_test_data sq1 where sq1.Sourceinfoid = t1.Sourceinfoid and sq1.PassFail=1) passed,
		(select COUNT(sq1.id) from dbo.QA_Audit_test_data sq1 where sq1.Sourceinfoid = t1.Sourceinfoid ) total
		/*(select COUNT(sq1.id) from QA_Audit_archive_main sq1 where sq1.Sourceinfoid = t1.Sourceinfoid and sq1.isActive=0) timesAudited,
		(select COUNT(sq2.id) from QA_Audit_archive_main sq2 where sq2.Sourceinfoid = t1.Sourceinfoid and sq2.isActive=1) pendingAudit*/
		FROM dbo.QA_Audit_main t1
		) 
	as s1 on s1.Sourceinfoid = t1.Sourceinfoid
	JOIN dbo.QA_Audit_priority t2 ON t1.Priority = t2.id
	WHERE t1.Sourceinfoid = 
		CASE 
			WHEN @Sourceinfoid = 0 THEN t1.Sourceinfoid 
			ELSE @Sourceinfoid 
		END
	/*AND Last_Audited =
		CASE 
			WHEN @Last_Audited IS NULL THEN Last_Audited 
			ELSE @Last_Audited 
		END*/
	AND T2.Active = 1
	ORDER BY t2.[Order] asc, t1.Points desc
END
GO
/****** Object:  StoredProcedure [dbo].[QA_Audit_sel_priority]    Script Date: 2/14/2020 12:29:27 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


-- =============================================
-- Author:		Ricardo Maureira
-- Create date: 01-30-2020
-- Description:	get all active priorities or one by id
-- =============================================
CREATE PROCEDURE [dbo].[QA_Audit_sel_priority]
	-- Add the parameters for the stored procedure here
	@id int = 0
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

	SELECT * from [dbo].[QA_Audit_priority]
	where Active = 1
	and id = 
		case when @id = 0 then id
		else @id end
	order by [order]
END
GO
/****** Object:  StoredProcedure [dbo].[QA_Audit_sel_question]    Script Date: 2/14/2020 12:29:27 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

-- =============================================
-- Author:		Ricardo Maureira
-- Create date: 02-05-2020
-- Description:	get all question info by id of test data table
-- =============================================
CREATE PROCEDURE [dbo].[QA_Audit_sel_question]
	-- Add the parameters for the stored procedure here
	@idtestdata int,
	@questionNumber int = 0
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

	SELECT * from [dbo].[QA_Audit_question]	
	where id_test_data = @idtestdata
	and questionNumber = 
		case when @questionNumber = 0 then questionNumber
		else @questionNumber end
END
GO
/****** Object:  StoredProcedure [dbo].[QA_Audit_sel_test_data]    Script Date: 2/14/2020 12:29:27 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

-- =============================================
-- Author:		Ricardo Maureira
-- Create date: 02-05-2020
-- Description:	get all testdata info by sourceinfoid
-- =============================================
CREATE PROCEDURE [dbo].[QA_Audit_sel_test_data]
	-- Add the parameters for the stored procedure here
	@sourceinfoid int,
	@id int = 0
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

	SELECT t1.* from [dbo].[QA_Audit_test_data] t1
	where t1.sourceinfoid = @sourceinfoid
	and t1.id = 
		case when @id = 0 then id
		else @id end
END
GO
/****** Object:  StoredProcedure [dbo].[QA_Audit_upd_archive_main]    Script Date: 2/14/2020 12:29:27 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

-- =============================================
-- Author:		Ricardo Maureira
-- Create date: 02/04/2020
-- Description:	update archive main record by id,  Last Audited date.
-- =============================================
CREATE PROCEDURE [dbo].[QA_Audit_upd_archive_main]
	@id int,
	@PassFail int,
	@isActive int,
	@QATeamNotes varchar(4000),
	@StartTime datetime,
	@EndTime datetime
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;
	
	declare @Sourceinfoid int = (select sourceinfoid from QA_Audit_archive_main where id = @id)
    -- Insert statements for procedure here
	update QA_Audit_archive_main 
	set isActive =  @isActive, PassFail=@PassFail, StartTime = @StartTime, EndTime = @EndTime, QATeamNotes = @QATeamNotes
	where id = @id

	update QA_Audit_main set PassFail = @PassFail where Sourceinfoid = @Sourceinfoid

	--backup test records
	insert into dbo.QA_Audit_archive_test_data 
	select Id, @id, Sourceinfoid, names, DOB, CaseNumber, DataScript, Origin, CreatedOn, PassFail, Answered, SourceUrl 
	from [dbo].[QA_Audit_test_data]
	where Sourceinfoid = @Sourceinfoid

	--backup questions
	insert into dbo.QA_Audit_archive_question
	select @id, qs.id_test_data, qs.QuestionNumber, qs.Question, qs.PassFail, qs.Notes, qs.VerifiedBy, qs.VerifiedOn
	from [dbo].[QA_Audit_question] qs
	join dbo.[QA_Audit_test_data] td on qs.id_test_data = td.id
	where td.Sourceinfoid = @Sourceinfoid

END
GO
/****** Object:  StoredProcedure [dbo].[QA_Audit_upd_main]    Script Date: 2/14/2020 12:29:27 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

-- =============================================
-- Author:		Ricardo Maureira
-- Create date: 01/29/2020
-- Description:	update Audit main record by id,  Last Audited date.
-- =============================================
CREATE PROCEDURE [dbo].[QA_Audit_upd_main]
	@sourceInfoId int,
	@PriorityName varchar(100),
	@Points int,
	@SourceIsActive int
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;
	
    -- Insert statements for procedure here
	update QA_Audit_main 
	set [Priority] =  (select top 1 id from [QA_Audit_priority] where [Name] = @PriorityName), 
		Points = @Points,
		SourceIsActive = @SourceIsActive,
		Last_Audited = GETDATE()
	where sourceInfoId = @sourceInfoId
END
GO
/****** Object:  StoredProcedure [dbo].[QA_Audit_upd_question]    Script Date: 2/14/2020 12:29:27 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


-- =============================================
-- Author:		Ricardo Maureira
-- Create date: 02/07/2020
-- Description:	update Audit question record by id and questionnumber.
-- =============================================
CREATE PROCEDURE [dbo].[QA_Audit_upd_question]
	@id int,
	@QuestionNumber int,
	@PassFail int,
	@Notes varchar(500),
	@VerifyBy varchar(200)
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;
	declare @totalPass int -- total n° of passed questions 
	declare @passFailMain bit = 0 -- status to update
	declare @totalrows int = (select count(id_test_data) from dbo.QA_Audit_question where id_test_data = @id)	-- total n° of rows for this audit
	print 'total rows ' + cast(@totalrows as varchar)
    -- update question
	update QA_Audit_question
	set PassFail = @PassFail,		
		VerifiedOn = GETDATE(),
		Notes = @Notes,
		VerifiedBy = @VerifyBy
	where id_test_data = @id
	and QuestionNumber = @QuestionNumber

	-- get total number of passed rows
	set @totalPass = (select count(id_test_data) from dbo.QA_Audit_question where id_test_data = @id and PassFail=1)
	-- set status to true if total = passedrows
	if @totalrows = @totalPass set @passFailMain = 1 

	print '@totalPass ' + cast(@totalPass as varchar)
	print '@passFailMain ' + cast(@passFailMain as varchar)

	-- update if actual status diff status to set
	update dbo.QA_Audit_test_data set PassFail = @passFailMain, Answered= 1 where id = @id
	

END
GO
